#!/usr/bin/env bash

set -e

if [ -n "$BUILDPACK_DEBUG" ]; then
  set -x
fi

basedir="$( cd -P "$( dirname "$0" )" && pwd )"

source "$basedir/../bin/common.sh"
source "$basedir/../config/versions.sh"
source "$basedir/../support/lib/utils"

openresty_version="${default_openresty_version}"

tempdir=$(mktmpdir openresty)
cd $tempdir

status "Downloading OpenResty ${openresty_version}"

curl --location --remote-name --silent "https://openresty.org/download/openresty-${openresty_version}.tar.gz"
tar -xzf "openresty-${openresty_version}.tar.gz"
cd "openresty-${openresty_version}"

# HTTP_REDIS_VERSION=${default_http_redis}
# HTTP_REDIS_NGINX_DIR="ngx_http_redis-${HTTP_REDIS_VERSION}"
# HTTP_REDIS_TARBALL="ngx_http_redis-${HTTP_REDIS_VERSION}.tar.gz"
# HTTP_REDIS_URL="https://people.freebsd.org/~osa/${HTTP_REDIS_TARBALL}"

# status "Downloading http redis module ${HTTP_REDIS_VERSION}"

# curl --remote-name --location --silent "${HTTP_REDIS_URL}"
# tar -xzvf "${HTTP_REDIS_TARBALL}"


# mkdir modules

zlib_version="$default_zlib_version"

if [ -z "$NGINX_PCRE_VERSION" ]; then
  # From https://sourceforge.net/projects/pcre/files/pcre/
  NGINX_PCRE_VERSION=8.45
fi

pcre_version="$NGINX_PCRE_VERSION"

status "Downloading dependency PCRE ${pcre_version}"

curl --location --remote-name --silent "https://sourceforge.net/projects/pcre/files/pcre/${pcre_version}/pcre-${pcre_version}.tar.gz"
tar -xzf "pcre-${pcre_version}.tar.gz"

status "Downloading dependency zlib ${zlib_version}"

zlib_filename="zlib-${zlib_version}.tar.gz"
curl --location --remote-name --silent "https://github.com/madler/zlib/releases/download/v1.2.13/${zlib_filename}"
file "$zlib_filename"
tar -xzf "$zlib_filename"

status "Installing OpenResty ${openresty_version}"

./configure --with-http_ssl_module --with-http_auth_request_module --with-pcre="./pcre-${pcre_version}" --with-zlib="./zlib-${zlib_version}" --with-http_realip_module
make
make install

export PATH=/usr/local/openresty/bin:/usr/local/openresty/nginx/sbin:$PATH

# make modules

# if test -f "${tempdir}/nginx-${nginx_version}/objs/ngx_http_redis_module.so"; then
#   status "HTTP redis module compiled available at ${tempdir}/nginx-${nginx_version}/objs/ngx_http_redis_module.so"
# else
#   status "Error while creating HTTP Redis module"
# fi

# # Copy to Scalingo Nginx
# BUILD_DIR="$1"
# cp "${tempdir}/nginx-${nginx_version}/objs/ngx_http_redis_module.so" "$BUILD_DIR/vendor/nginx/modules/"

# # Update Scalingo  Nginx conf
# sed -i '1iload_module modules/ngx_http_modsecurity_module.so;' "$BUILD_DIR/vendor/nginx/conf/nginx.conf"


#######
# Prepa du terrain

mkdir -p "/app/vendor/nginx"
mkdir -p "/app/vendor/nginx/conf"
mkdir -p "/app/bin"

cp ../config/openresty/nginx.conf /app/vendor/nginx/conf

cat > "/app/bin/run" <<SH
#!/usr/bin/env bash

basedir="\$( cd -P "\$(dirname \$(dirname "\$0" ))" && pwd )"
pmsgr=/tmp/pmsgr
rm -f \$pmsgr
mkfifo \$pmsgr

PATH=/usr/local/openresty/nginx/sbin:$PATH
export PATH

(
    nginx -c "/app/vendor/nginx/conf/nginx.conf"
    echo "nginx" > \$pmsgr
) &

read exitproc <\$pmsgr
echo "Boot failed: \$exitproc"
exit 1
SH

chmod +x "/app/bin/run"